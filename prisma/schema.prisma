// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Usuario {
  id         String      @id // Clerk userId se usará aquí, no se generará automáticamente
  categorias Categoria[]
  audioClips AudioClip[]

  despedidaAudioUrl String?
  inicioAudioUrl    String?
}

model Categoria {
  id         Int         @id @default(autoincrement())
  nombre     String
  usuarioId  String
  usuario    Usuario     @relation(fields: [usuarioId], references: [id])
  audioClips AudioClip[]
  referenceClips AudioClip[] @relation("ReferenceClips")

  seccionesReferencia SeccionReferencia[]
}

model AudioClip {
  id            String    @id @default(uuid())
  nombre        String
  fechaCreacion DateTime  @default(now())
  tags          String[]
  categoriaId   Int
  audioUrl      String
  categoria     Categoria @relation(fields: [categoriaId], references: [id])
  usuarioId     String
  usuario       Usuario   @relation(fields: [usuarioId], references: [id])
  orden         Int

  referenceCategoria Categoria? @relation("ReferenceClips", fields: [referenceCategoriaId], references: [id])
  referenceCategoriaId Int?
  
  seccionesReferencia SeccionReferencia[] @relation("SeccionAudioClips")
}

model SeccionReferencia {
  id         Int          @id @default(autoincrement())
  nombre     String
  audios     AudioClip[]  @relation("SeccionAudioClips") // Relación con los clips de audio de referencia
  categoria  Categoria     @relation(fields: [categoriaId], references: [id])
  categoriaId Int
}

